from fastapi.testclient import TestClient
import os
import importlib
import pytest
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import soil



client = TestClient(soil.app)

# you need to run `pytest -s` to see this output. It will always succeed.
def test_routes():
    print("\nRegistered routes:")
    for route in soil.app.routes:
        print(f"{route.path} -- {route.name}")

def test_invalid_range_lat_lon():
    """
    Calls with invalid lat/lon should fail quickly and not hit the Database,
    returning 422 Unprocessable Entity (FastAPI validation error).
    """
    response = client.get("/soil", params={"lon": -200.0, "lat": 37.49})
    assert response.status_code == 422

    response = client.get("/soil", params={"lon": -122.44, "lat": 100.0})
    assert response.status_code == 422


def test_invalid_type_lat_lon():
    """
    Calls with invalid lat/lon types should fail quickly and not hit the Database,
    returning 422 Unprocessable Entity (FastAPI validation error).
    """
    response = client.get("/soil", params={"lon": "abc", "lat": 37.49})
    assert response.status_code == 422

    response = client.get("/soil", params={"lon": -122.44, "lat": "cde"})
    assert response.status_code == 422

def test_one_mapunit_sent():
    """
    When the user clicks on a point that map should only produce the parcel connected to 
    that point.
    """
    response = client.get("/soil", params={"lon": -122.449871, "lat": 37.492633})
    content = response.json()
    assert len(content["data"]) == 1, f"Expected 1 mapunit, got {len(content['data'])}"

def test_utility_coordinate_found_among_many():
    """
    There's a utility function associated with test_one_mapunit_sent(). Check that it can find
    a coordinate.
    """
    mock_data = {
        "data": [
            [
                "399360445",
                "456385",
                "POLYGON ((-122.48942964957 37.5149813992474, -122.489539871954 37.514857446909, -122.489644311359 37.5147728402309, -122.489773081803 37.514712493171, -122.489874895628 37.5147017946587, -122.490004490274 37.5147118001047, -122.490169556076 37.5147472868204, -122.490228715263 37.5147693280852, -122.490397597338 37.5148930608657, -122.490578740309 37.5150567456865, -122.490773605881 37.5153454429442, -122.491220687781 37.5157939988485, -122.491305623144 37.5158928793848, -122.491442873867 37.5161118559577, -122.491533925074 37.5162047283824, -122.491657593375 37.516269888994, -122.49199150129 37.5163446558631, -122.49211453775 37.5164016043019, -122.492282968885 37.5165467836576, -122.492642180085 37.5169500168589, -122.492798840836 37.5170857622284, -122.492989981015 37.5171599663406, -122.493383828178 37.51723617784, -122.493456330639 37.517265443914, -122.493516292623 37.5173123641963, -122.493750384837 37.5175783669826, -122.493852927554 37.5177252849604, -122.493901957619 37.5178526125912, -122.493958616581 37.5181369445329, -122.493993653582 37.5182163540691, -122.49420752706 37.518508225051, -122.494332344532 37.5186445933827, -122.494529515833 37.5188195420851, -122.494913467386 37.5191086497473, -122.495101010329 37.5191892253344, -122.495271579127 37.51922347728, -122.495335592812 37.5192230845386, -122.495511736379 37.5191428572202, -122.495975170331 37.5188415292971, -122.496102697985 37.5187972322654, -122.496168274577 37.5187881362693, -122.496237317525 37.5188014684556, -122.496304839752 37.5188884634486, -122.496327042131 37.5190106529967, -122.496311305436 37.5191784522917, -122.496246501618 37.5194101281011, -122.49617424007 37.5195144606593, -122.495978561189 37.5197132180909, -122.495528521419 37.5201127161107, -122.495015917602 37.5198421680449, -122.494737975007 37.5197224061722, -122.494502893102 37.5196450350502, -122.494274580037 37.519602347086, -122.494086767253 37.5195923684075, -122.493640718318 37.5196104322772, -122.493451337981 37.5196026593991, -122.493097504293 37.5195546234469, -122.492229611319 37.5194006334284, -122.491745559338 37.519360362789, -122.491619417504 37.5193662915554, -122.491474618829 37.5193958821609, -122.491079637804 37.519543593188, -122.49039290052 37.5198224287808, -122.489389246739 37.5201442675831, -122.489123278957 37.5195382691427, -122.489446637959 37.5192469415923, -122.489479249624 37.5192062384537, -122.489529972215 37.5190074188022, -122.48982070501 37.5187373053606, -122.48996440494 37.5184323110121, -122.490002610078 37.5182966170257, -122.490023367081 37.5181035681368, -122.489980507039 37.5180546791449, -122.489880223114 37.5180047069608, -122.489785082519 37.5178941852364, -122.489637651968 37.5174268913703, -122.489633677734 37.5173349681127, -122.489585620122 37.5172491883435, -122.489537118666 37.5172108418163, -122.4893447466 37.5171721768941, -122.489280405838 37.5171457246028, -122.489248527932 37.5170943802627, -122.489250196418 37.5169919143651, -122.489325357908 37.5167300872985, -122.489291103164 37.516636581005, -122.48915611929 37.51653403916, -122.489211136096 37.5164409926565, -122.489174424907 37.5161624121828, -122.48918974744 37.5160680309735, -122.489314727528 37.5159584140947, -122.489324371307 37.5158096154005, -122.489348034219 37.5157607033789, -122.489317510964 37.5156060352388, -122.48931884322 37.5154637353827, -122.489412628099 37.5154019298837, -122.489530212471 37.5152559131215, -122.489513686388 37.5151621556216, -122.48942964957 37.5149813992474))"
            ]
        ]
    }
    polygons = mock_data["data"]

    # Pick a point clearly inside that polygon
    lat, lon = 37.5160, -122.4900

    result = soil.find_polygon_with_coordinate(lat, lon, polygons)

    assert isinstance(result, list)
    assert len(result) == 1  # only one polygon should contain it
    assert result[0][0] == "399360445"  # check polygon ID
    assert result[0][1] == "456385"
    assert result[0][2].startswith("POLYGON ((")  # geometry format check